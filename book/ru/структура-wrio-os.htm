<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Описание структуры платформы WRIO OS. Для понимания деталей требуется некоторое представление о том, как работают сайты.">
    <meta name="author" content="Alexey Anshakov">
    <meta name="keywords" content="webRunes, WRIO OS">
    <title>Структура WRIO OS</title>
    
    <script type="application/ld+json">
        {
        "entity": "Article",
        "version": "1.0",
        "templateVersion": "1.0",
        "cover": "http://domain.com/cover.htm",
        "translation": "http://domain.com/translation.htm",
        "list": [
        {
        "@type": "ItemList",
        "name": "List name 1",
        "url": "http://domain.com/List-name-1.htm"
        },
        {
        "@type": "ItemList",
        "name": "List name 2",
        "url": "http://domain.com/List-name-2.htm"
        }
        ]
        }
    </script>

    <script type="application/ld+json">
    {
        "@context": "http://schema.org",
        "@type": "Article",
        "inLanguage": "ru",
        "keywords": "webRunes",
        "name": "webRunes",
        "about": "Описание структуры платформы WRIO OS. Для понимания деталей требуется некоторое представление о том, как работают сайты.",
        "articleBody": [
        "Если вы вебразработчик, то наверняка не раз сетовали, что сайты смешивают данные и их представление на стороне клиента, поэтому если вы хотите использовать или обработать информацию со стороннего сайта, то вам необходимо написать парсер. Идея платформы WRIO построена на том, чтобы сохранять данные чистыми, без примесей разметки и других элементов необходимых для отображения информации пользователю. А также чтобы они были легко доступны всем желающим без необходимости с вашей стороны создавать API к базе данных. Поэтому в итоге структура проекта построена на идее распределенной сети связанных между собой кусочков json-ld данных, своего рода децентрализованная база данных. Каждый такой кусочек построен по одной из схем http://schema.org/ и является файлом с максимальным набором взаимосвязанных данных некоего объекта: персоны, компании, события и пр. Такие объекты назваются сущностями и больше о них можно почитать в разделе (ссылка на Entity). На практике это выглядит так: например, мы хотим создать страницу о каком-то человеке. При создании новой страницы (ссылка) система выбирает подходящую схему (http://schema.org/Person), мы заполняем все данные: имя, год рождения и прочее, после чего получаем файл вида (ссылка на мой профайл на гитхабе) и сохраняем где нам удобно, например, на своем сервере или github. При открытии файла скрипт WRIO OS обрабатывает его и динамически генерирует страницу на базе извлеченных данных, после чего добавляет виджеты для взаимодействия о страницей. Графически это можно представить так:",
        "[тут будет ссылка на картинку]",
        "1. HTML, JSON-LD inside. Stored on your server, dropbox, google drive, etc.",
        "2. WRIO OS javascript. Отобразить как один большой слой над json-ld файлами.",
        "3. Personal custom UI. Отображение данных в нужном пользователю виде.",
        "4. Widgets. Добавляют динамические функции на страницу."
        ],
        "author": {
        "@context": "http://schema.org",
        "@type": "Person",
        "givenName": "Alexey",
        "familyName": "Anshakov",
        "sameAs": "http://alexey-anshakov.webrunes.com"
        },
        "editor": ""
    }
    </script>
</head>

<body>
    <script src="http://wrio.s3-website-us-east-1.amazonaws.com/WRIO-InternetOS/WRIO.js"></script>
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
        ga('create', 'UA-31412301-1', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>
